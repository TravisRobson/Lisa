

configure_file(lisa_config.hpp.in lisa_config.hpp)


# We need GSL for certain numerical routines. I have yet to do any profiling
# of GSL versus other libraries. 
if (LISA_USE_GSL)
  find_package(GSL REQUIRED)
  list(APPEND EXTRA_LIBS ${GSL_LIBRARIES})
  list(APPEND EXTRA_INCLUDES ${GSL_INCLUDE_DIRS})
endif()


#
# Specify the lisa library target.
#
target_sources(lisa
  PRIVATE
    lisa_binfiles.cpp
    lisa_detector.cpp
    lisa_errors.cpp
    lisa_math.cpp
    lisa_noise.cpp
    lisa_types.cpp
    lisa_utils.cpp)

if (BUILD_SHARED_LIBS)
  set_property(TARGET lisa 
    PROPERTY 
      POSITION_INDEPENDENT_CODE ON
      VERSION ${PROJECT_VERSION}
      # SOVERSION ${PROJECT_VERSION_MAJOR} # \todo why is this annoying?
  )
endif()

target_link_libraries(lisa PRIVATE ${EXTRA_LIBS})
target_include_directories(lisa 
  PUBLIC 
    $<INSTALL_INTERFACE:include/lisa>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
  PRIVATE
    ${CMAKE_CURRENT_LIST_DIR}
    ${EXTRA_INCLUDES}
)
install(
  TARGETS lisa 
  EXPORT LisaTargets
  ARCHIVE DESTINATION lib 
  LIBRARY DESTINATION lib
)
install(
  FILES 
    lisa_binfiles.hpp
    lisa_detector.hpp 
    lisa_utils.hpp 
    lisa_types.hpp 
    ${CMAKE_CURRENT_BINARY_DIR}/lisa_config.hpp
  DESTINATION 
    include/lisa
)

#install the autogenerated LisaTargets.cmake
install(EXPORT LisaTargets FILE LisaTargets.cmake DESTINATION lib/cmake/lisa)

include(CMakePackageConfigHelpers)
# generate the config file that is includes the exports
configure_package_config_file(${CMAKE_SOURCE_DIR}/Config.cmake.in
  "${CMAKE_BINARY_DIR}/LisaConfig.cmake"
  INSTALL_DESTINATION "lib/cmake/lisa"
  NO_SET_AND_CHECK_MACRO
  NO_CHECK_REQUIRED_COMPONENTS_MACRO
)
# generate the version file for the config file
write_basic_package_version_file(
  "${CMAKE_BINARY_DIR}/LisaConfigVersion.cmake"
  VERSION "${Lisa_VERSION_MAJOR}.${Lisa_VERSION_MINOR}"
  COMPATIBILITY AnyNewerVersion
)

# install the configuration file
install(FILES
  ${CMAKE_BINARY_DIR}/LisaConfig.cmake
  DESTINATION lib/cmake/lisa
)


#
# Fetch Plog
#
if (ENABLE_LISA_PROFILE)
  include(FetchContent)
  FetchContent_Declare(
    plog
    GIT_REPOSITORY https://github.com/SergiusTheBest/plog
    GIT_TAG        1.1.5
  )
  FetchContent_MakeAvailable(plog)
  list(APPEND EXTRA_DRIVER_LIBS plog)
endif()


#
# Specify the lisa_driver target.
# \todo This executable will be delivered separately?
#
add_executable(lisa_driver lisa_main.cpp)
target_link_libraries(lisa_driver PRIVATE lisa ${EXTRA_DRIVER_LIBS})
target_include_directories(lisa_driver 
  PUBLIC
    $<INSTALL_INTERFACE:include/lisa>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
)
target_compile_definitions(lisa_driver PRIVATE LISA_ROOT_PATH="${CMAKE_SOURCE_DIR}/")
install(TARGETS lisa_driver RUNTIME DESTINATION bin)

if(OpenMP_CXX_FOUND)
  target_link_libraries(lisa_driver PRIVATE OpenMP::OpenMP_CXX)
  target_compile_definitions(lisa_driver PRIVATE LISA_USE_OPENMP)
endif()


if (ENABLE_LISA_TESTS)
  add_subdirectory(tests)
endif()

if (BUILD_LEGACY_LISA)
  add_subdirectory(legacy)
endif()




